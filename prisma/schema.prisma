// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

enum UserStatus {
  ACTIVE
  ARCHIVED
  INACTIVE
}

enum TherapyStatus {
  PENDING
  CONFIRMED
  COMPLETED
  CANCELED
}

enum PaymentStatus {
  PAID
  PENDING
  NOT_PAID
  CANCELED
}

enum Local {
  ONLINE
  PRESENCIAL
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id            String        @id @default(cuid())
  name          String?
  email         String?       @unique
  emailVerified DateTime?     @map("email_verified")
  image         String?
  createdAt     DateTime      @default(now()) @map("created_at")
  status        UserStatus    @default(ACTIVE)
  accounts      Account[]
  sessions      Session[]
  psychologist  Psychologist?

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model Psychologist {
  id        String    @id @default(cuid())
  userId    String    @unique @map("user_id")
  patients  Patient[]
  therapies Therapy[]
  user      User      @relation(fields: [userId], references: [id])

  @@map("psychologists")
}

model Patient {
  id             String       @id @default(cuid())
  name           String
  age            Int
  email          String       @unique
  notes          String?      @db.Text
  diagnosis      String       @db.Text
  status         UserStatus   @default(ACTIVE)
  therapies      Therapy[]
  createdAt      DateTime     @default(now()) @map("created_at")
  psychologistId String       @map("psychologist_id")
  psychologist   Psychologist @relation(fields: [psychologistId], references: [id])

  @@map("patients")
}

model Therapy {
  id             String        @id @default(cuid())
  patientId      String        @map("patient_id")
  psychologistId String        @map("psychologist_id")
  date           DateTime
  price          Decimal       @map("base_price") @db.Decimal(5, 2)
  local          Local
  payment        PaymentStatus @default(PENDING)
  status         TherapyStatus @default(PENDING)
  createdAt      DateTime      @default(now()) @map("created_at")
  patient        Patient       @relation(fields: [patientId], references: [id])
  psychologist   Psychologist  @relation(fields: [psychologistId], references: [id])

  @@map("therapies")
}
